{
  "address": "0x209ACC4edB3dC87101f285D663d3F88dd0A5943A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "prompt",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "optionIndex",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionIndex",
          "type": "uint256"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_prompt",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_options",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_durationInMinutes",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "createPoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPollById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prompt",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct Voting.Poll",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getPollsByCreator",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getVoteCounts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pollCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "polls",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "prompt",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pollsByCreator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voteCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf95f8f04bfcb0f74d6cb60e1809531279feabee45c73f9c8034af6f6641c9d1d",
  "receipt": {
    "to": null,
    "from": "0xAd4599E0E0aeD9eE8e3Fd17c79E30F5a2cd1c92E",
    "contractAddress": "0x209ACC4edB3dC87101f285D663d3F88dd0A5943A",
    "transactionIndex": 164,
    "gasUsed": "1287543",
    "logsBloom": "0x
    "blockHash": "0x7296854280b1cc1b53e665232fbbe280cff7b59becb6a1dde17da82d8e2de7b0",
    "transactionHash": "0xf95f8f04bfcb0f74d6cb60e1809531279feabee45c73f9c8034af6f6641c9d1d",
    "logs": [],
    "blockNumber": 7264006,
    "cumulativeGasUsed": "19547970",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "28724404a5f12ae7b271d65fbe4f385b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionIndex\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionIndex\",\"type\":\"uint256\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prompt\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_options\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_durationInMinutes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"createPoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPollById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct Voting.Poll\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getPollsByCreator\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getVoteCounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pollsByCreator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ncontract Voting {\\r\\n\\r\\n    struct Poll {\\r\\n        string name;\\r\\n        string prompt;\\r\\n        string[] options;\\r\\n        uint256 endTime;\\r\\n        address nftAddress; // Address of the NFT contract for eligibility\\r\\n        bool exists;\\r\\n        address creator;\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => Poll) public polls;\\r\\n    mapping(address => uint256[]) public pollsByCreator;\\r\\n    mapping(uint256 => mapping(address => bool)) public hasVoted; // Tracks if a user has voted in a poll\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) public voteCounts;\\r\\n    \\r\\n    uint256 public pollCounter;\\r\\n    \\r\\n    event PollCreated(\\r\\n        uint256 indexed pollId, \\r\\n        address indexed creator, \\r\\n        string name, \\r\\n        string prompt,\\r\\n        uint256 endTime,\\r\\n        address nftAddress\\r\\n    );\\r\\n\\r\\n    event VoteCast(\\r\\n        uint256 pollId, \\r\\n        address voter, \\r\\n        uint256 optionIndex\\r\\n    );\\r\\n    \\r\\n    \\r\\n    function createPoll(\\r\\n        string memory _name,\\r\\n        string memory _prompt,\\r\\n        string[] memory _options,\\r\\n        uint256 _durationInMinutes,\\r\\n        address _nftAddress // Address of the NFT contract (can be zero address)\\r\\n    ) public returns (uint256) {\\r\\n        require(_options.length >= 2, \\\"At least 2 options required\\\");\\r\\n        \\r\\n        uint256 pollId = pollCounter++;\\r\\n        polls[pollId] = Poll({\\r\\n            name: _name,\\r\\n            prompt: _prompt,\\r\\n            options: _options,\\r\\n            endTime: block.timestamp + (_durationInMinutes * 1 minutes),\\r\\n            exists: true,\\r\\n            creator: msg.sender,\\r\\n            nftAddress: _nftAddress\\r\\n        });\\r\\n        pollsByCreator[msg.sender].push(pollId);\\r\\n        \\r\\n        emit PollCreated(pollId, msg.sender, _name, _prompt, block.timestamp + (_durationInMinutes * 1 minutes), _nftAddress);\\r\\n        return pollId;\\r\\n    }\\r\\n    \\r\\n    function castVote(uint256 pollId, uint256 optionIndex) public {\\r\\n        require(polls[pollId].exists, \\\"Poll does not exist\\\");\\r\\n        require(block.timestamp < polls[pollId].endTime, \\\"Poll has ended\\\");\\r\\n        require(optionIndex < polls[pollId].options.length, \\\"Invalid option\\\");\\r\\n        require(!hasVoted[pollId][msg.sender], \\\"User has already voted\\\");\\r\\n        \\r\\n        Poll memory poll = polls[pollId];\\r\\n\\r\\n        // Check NFT ownership if an NFT address is set\\r\\n        if (poll.nftAddress != address(0)) {\\r\\n            IERC721 nftContract = IERC721(poll.nftAddress);\\r\\n            require(\\r\\n                nftContract.balanceOf(msg.sender) > 0,\\r\\n                \\\"User does not own the required NFT\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Mark user as voted and count the vote\\r\\n        hasVoted[pollId][msg.sender] = true;\\r\\n        voteCounts[pollId][optionIndex]++;\\r\\n\\r\\n        emit VoteCast(pollId, msg.sender, optionIndex);\\r\\n    }\\r\\n    \\r\\n    // Existing function to get individual poll by ID\\r\\n    function getPollById(uint256 _pollId) public view returns (Poll memory) {\\r\\n        require(polls[_pollId].exists, \\\"Poll does not exist\\\");\\r\\n        return polls[_pollId];\\r\\n    }\\r\\n     // New function to get polls by creator\\r\\n    function getPollsByCreator(address _creator) public view returns (uint256[] memory) {\\r\\n        return pollsByCreator[_creator];\\r\\n    }\\r\\n    \\r\\n    function getVoteCounts(uint256 _pollId) public view returns (uint256[] memory) {\\r\\n        require(polls[_pollId].exists, \\\"Poll does not exist\\\");\\r\\n        uint256[] memory counts = new uint256[](polls[_pollId].options.length);\\r\\n        \\r\\n        for (uint256 i = 0; i < polls[_pollId].options.length; i++) {\\r\\n            counts[i] = voteCounts[_pollId][i];\\r\\n        }\\r\\n        \\r\\n        return counts;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd9f626f219c5c62d22bfdeb7dd2f826b3c9e91a0b1aeffca6f038e70d77b9a64\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611653806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ac2f007411610066578063ac2f00741461014f578063d02eed3814610174578063d2daa1c21461017d578063d4bc5e91146101a8578063fb790a32146101c857600080fd5b806311378553146100a35780632c0a3f89146100c957806343859632146100de5780636fb9e0c91461011c5780638a241f4c1461012f575b600080fd5b6100b66100b1366004611030565b6101db565b6040519081526020015b60405180910390f35b6100dc6100d7366004611155565b6103ce565b005b61010c6100ec366004611177565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100c0565b6100b661012a3660046111a3565b6108bf565b61014261013d3660046111cd565b6108f0565b6040516100c091906111e6565b61016261015d3660046111cd565b6109ef565b6040516100c096959493929190611270565b6100b660045481565b6100b661018b366004611155565b600360209081526000928352604080842090915290825290205481565b6101bb6101b63660046111cd565b610b46565b6040516100c091906112c6565b6101426101d63660046113b0565b610e2c565b60006002845110156102345760405162461bcd60e51b815260206004820152601b60248201527f4174206c656173742032206f7074696f6e73207265717569726564000000000060448201526064015b60405180910390fd5b6004805460009182610245836113e8565b9190505590506040518060e0016040528088815260200187815260200186815260200185603c6102759190611401565b61027f904261141e565b81526001600160a01b03851660208083019190915260016040808401919091523360609093019290925260008481529081905220815181906102c190826114ba565b50602082015160018201906102d690826114ba565b50604082015180516102f2916002840191602090910190610e98565b5060608201516003820155608082015160048201805460a08501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560c09092015160059091018054919092166001600160a01b031991909116179055336000818152600160208181526040832080549283018155835290912001829055817fe296c6e2db9895797771a7587ffcb6b02e22ba2d9aa2d5569672e64b2b2c00dc89896103a189603c611401565b6103ab904261141e565b886040516103bc949392919061157a565b60405180910390a39695505050505050565b600082815260208190526040902060040154600160a01b900460ff166104065760405162461bcd60e51b815260040161022b906115c1565b60008281526020819052604090206003015442106104575760405162461bcd60e51b815260206004820152600e60248201526d141bdb1b081a185cc8195b99195960921b604482015260640161022b565b60008281526020819052604090206002015481106104a85760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21037b83a34b7b760911b604482015260640161022b565b600082815260026020908152604080832033845290915290205460ff161561050b5760405162461bcd60e51b8152602060048201526016602482015275155cd95c881a185cc8185b1c9958591e481d9bdd195960521b604482015260640161022b565b600082815260208190526040808220815160e0810190925280548290829061053290611431565b80601f016020809104026020016040519081016040528092919081815260200182805461055e90611431565b80156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b505050505081526020016001820180546105c490611431565b80601f01602080910402602001604051908101604052809291908181526020018280546105f090611431565b801561063d5780601f106106125761010080835404028352916020019161063d565b820191906000526020600020905b81548152906001019060200180831161062057829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561071757838290600052602060002001805461068a90611431565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690611431565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b50505050508152602001906001019061066b565b505050908252506003820154602082015260048201546001600160a01b038082166040840152600160a01b90910460ff1615156060830152600590920154821660809182015282015191925016156108335760808101516040516370a0823160e01b81523360048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906115ee565b116108315760405162461bcd60e51b815260206004820152602260248201527f5573657220646f6573206e6f74206f776e20746865207265717569726564204e604482015261119560f21b606482015260840161022b565b505b60008381526002602090815260408083203384528252808320805460ff19166001179055858352600382528083208584529091528120805491610875836113e8565b9091555050604080518481523360208201529081018390527f2acce567deca3aabf56327adbb4524bd5318936eaefa69e3a5208ffda0cfec099060600160405180910390a1505050565b600160205281600052604060002081815481106108db57600080fd5b90600052602060002001600091509150505481565b600081815260208190526040902060040154606090600160a01b900460ff1661092b5760405162461bcd60e51b815260040161022b906115c1565b60008281526020819052604081206002015467ffffffffffffffff81111561095557610955610f5d565b60405190808252806020026020018201604052801561097e578160200160208202803683370190505b50905060005b6000848152602081905260409020600201548110156109e857600084815260036020908152604080832084845290915290205482518390839081106109cb576109cb611607565b6020908102919091010152806109e0816113e8565b915050610984565b5092915050565b600060208190529081526040902080548190610a0a90611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3690611431565b8015610a835780601f10610a5857610100808354040283529160200191610a83565b820191906000526020600020905b815481529060010190602001808311610a6657829003601f168201915b505050505090806001018054610a9890611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac490611431565b8015610b115780601f10610ae657610100808354040283529160200191610b11565b820191906000526020600020905b815481529060010190602001808311610af457829003601f168201915b5050505060038301546004840154600590940154929390926001600160a01b038083169350600160a01b90920460ff16911686565b610b9a6040518060e001604052806060815260200160608152602001606081526020016000815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b031681525090565b600082815260208190526040902060040154600160a01b900460ff16610bd25760405162461bcd60e51b815260040161022b906115c1565b60008281526020819052604090819020815160e08101909252805482908290610bfa90611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2690611431565b8015610c735780601f10610c4857610100808354040283529160200191610c73565b820191906000526020600020905b815481529060010190602001808311610c5657829003601f168201915b50505050508152602001600182018054610c8c90611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb890611431565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ddf578382906000526020600020018054610d5290611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7e90611431565b8015610dcb5780601f10610da057610100808354040283529160200191610dcb565b820191906000526020600020905b815481529060010190602001808311610dae57829003601f168201915b505050505081526020019060010190610d33565b505050908252506003820154602082015260048201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260059092015490911660809091015292915050565b6001600160a01b038116600090815260016020908152604091829020805483518184028101840190945280845260609392830182828015610e8c57602002820191906000526020600020905b815481526020019060010190808311610e78575b50505050509050919050565b828054828255906000526020600020908101928215610ede579160200282015b82811115610ede5782518290610ece90826114ba565b5091602001919060010190610eb8565b50610eea929150610eee565b5090565b80821115610eea576000610f028282610f0b565b50600101610eee565b508054610f1790611431565b6000825580601f10610f27575050565b601f016020900490600052602060002090810190610f459190610f48565b50565b5b80821115610eea5760008155600101610f49565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f9c57610f9c610f5d565b604052919050565b600082601f830112610fb557600080fd5b813567ffffffffffffffff811115610fcf57610fcf610f5d565b610fe2601f8201601f1916602001610f73565b818152846020838601011115610ff757600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461102b57600080fd5b919050565b600080600080600060a0868803121561104857600080fd5b853567ffffffffffffffff8082111561106057600080fd5b61106c89838a01610fa4565b965060209150818801358181111561108357600080fd5b61108f8a828b01610fa4565b9650506040880135818111156110a457600080fd5b8801601f81018a136110b557600080fd5b8035828111156110c7576110c7610f5d565b8060051b6110d6858201610f73565b918252828101850191858101908d8411156110f057600080fd5b86850192505b8383101561112c5782358681111561110e5760008081fd5b61111c8f8983890101610fa4565b83525091860191908601906110f6565b809950505050505050506060860135915061114960808701611014565b90509295509295909350565b6000806040838503121561116857600080fd5b50508035926020909101359150565b6000806040838503121561118a57600080fd5b8235915061119a60208401611014565b90509250929050565b600080604083850312156111b657600080fd5b6111bf83611014565b946020939093013593505050565b6000602082840312156111df57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561121e57835183529284019291840191600101611202565b50909695505050505050565b6000815180845260005b8181101561125057602081850181015186830182015201611234565b506000602082860101526020601f19601f83011685010191505092915050565b60c08152600061128360c083018961122a565b8281036020840152611295818961122a565b604084019790975250506001600160a01b039384166060820152911515608083015290911660a09091015292915050565b60006020808352835160e0828501526112e361010085018261122a565b905081850151601f1980868403016040870152611300838361122a565b60408801518782038301606089015280518083529194508501925084840190600581901b8501860160005b82811015611357578487830301845261134582875161122a565b9588019593880193915060010161132b565b5060608a015160808a015260808a0151965061137e60a08a01886001600160a01b03169052565b60a08a015180151560c08b0152965060c08a01516001600160a01b03811660e08b015296509998505050505050505050565b6000602082840312156113c257600080fd5b6113cb82611014565b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016113fa576113fa6113d2565b5060010190565b8082028115828204841417611418576114186113d2565b92915050565b80820180821115611418576114186113d2565b600181811c9082168061144557607f821691505b60208210810361146557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156114b557600081815260208120601f850160051c810160208610156114925750805b601f850160051c820191505b818110156114b15782815560010161149e565b5050505b505050565b815167ffffffffffffffff8111156114d4576114d4610f5d565b6114e8816114e28454611431565b8461146b565b602080601f83116001811461151d57600084156115055750858301515b600019600386901b1c1916600185901b1785556114b1565b600085815260208120601f198616915b8281101561154c5788860151825594840194600190910190840161152d565b508582101561156a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60808152600061158d608083018761122a565b828103602084015261159f818761122a565b604084019590955250506001600160a01b039190911660609091015292915050565b602080825260139082015272141bdb1b08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60006020828403121561160057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212202fe499f0ab2e10bc8c422d704f5ddd0ae71ebbf443ebd3e3a7607c0bd4723e2064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ac2f007411610066578063ac2f00741461014f578063d02eed3814610174578063d2daa1c21461017d578063d4bc5e91146101a8578063fb790a32146101c857600080fd5b806311378553146100a35780632c0a3f89146100c957806343859632146100de5780636fb9e0c91461011c5780638a241f4c1461012f575b600080fd5b6100b66100b1366004611030565b6101db565b6040519081526020015b60405180910390f35b6100dc6100d7366004611155565b6103ce565b005b61010c6100ec366004611177565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100c0565b6100b661012a3660046111a3565b6108bf565b61014261013d3660046111cd565b6108f0565b6040516100c091906111e6565b61016261015d3660046111cd565b6109ef565b6040516100c096959493929190611270565b6100b660045481565b6100b661018b366004611155565b600360209081526000928352604080842090915290825290205481565b6101bb6101b63660046111cd565b610b46565b6040516100c091906112c6565b6101426101d63660046113b0565b610e2c565b60006002845110156102345760405162461bcd60e51b815260206004820152601b60248201527f4174206c656173742032206f7074696f6e73207265717569726564000000000060448201526064015b60405180910390fd5b6004805460009182610245836113e8565b9190505590506040518060e0016040528088815260200187815260200186815260200185603c6102759190611401565b61027f904261141e565b81526001600160a01b03851660208083019190915260016040808401919091523360609093019290925260008481529081905220815181906102c190826114ba565b50602082015160018201906102d690826114ba565b50604082015180516102f2916002840191602090910190610e98565b5060608201516003820155608082015160048201805460a08501511515600160a01b026001600160a81b03199091166001600160a01b039384161717905560c09092015160059091018054919092166001600160a01b031991909116179055336000818152600160208181526040832080549283018155835290912001829055817fe296c6e2db9895797771a7587ffcb6b02e22ba2d9aa2d5569672e64b2b2c00dc89896103a189603c611401565b6103ab904261141e565b886040516103bc949392919061157a565b60405180910390a39695505050505050565b600082815260208190526040902060040154600160a01b900460ff166104065760405162461bcd60e51b815260040161022b906115c1565b60008281526020819052604090206003015442106104575760405162461bcd60e51b815260206004820152600e60248201526d141bdb1b081a185cc8195b99195960921b604482015260640161022b565b60008281526020819052604090206002015481106104a85760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21037b83a34b7b760911b604482015260640161022b565b600082815260026020908152604080832033845290915290205460ff161561050b5760405162461bcd60e51b8152602060048201526016602482015275155cd95c881a185cc8185b1c9958591e481d9bdd195960521b604482015260640161022b565b600082815260208190526040808220815160e0810190925280548290829061053290611431565b80601f016020809104026020016040519081016040528092919081815260200182805461055e90611431565b80156105ab5780601f10610580576101008083540402835291602001916105ab565b820191906000526020600020905b81548152906001019060200180831161058e57829003601f168201915b505050505081526020016001820180546105c490611431565b80601f01602080910402602001604051908101604052809291908181526020018280546105f090611431565b801561063d5780601f106106125761010080835404028352916020019161063d565b820191906000526020600020905b81548152906001019060200180831161062057829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561071757838290600052602060002001805461068a90611431565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690611431565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b50505050508152602001906001019061066b565b505050908252506003820154602082015260048201546001600160a01b038082166040840152600160a01b90910460ff1615156060830152600590920154821660809182015282015191925016156108335760808101516040516370a0823160e01b81523360048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906115ee565b116108315760405162461bcd60e51b815260206004820152602260248201527f5573657220646f6573206e6f74206f776e20746865207265717569726564204e604482015261119560f21b606482015260840161022b565b505b60008381526002602090815260408083203384528252808320805460ff19166001179055858352600382528083208584529091528120805491610875836113e8565b9091555050604080518481523360208201529081018390527f2acce567deca3aabf56327adbb4524bd5318936eaefa69e3a5208ffda0cfec099060600160405180910390a1505050565b600160205281600052604060002081815481106108db57600080fd5b90600052602060002001600091509150505481565b600081815260208190526040902060040154606090600160a01b900460ff1661092b5760405162461bcd60e51b815260040161022b906115c1565b60008281526020819052604081206002015467ffffffffffffffff81111561095557610955610f5d565b60405190808252806020026020018201604052801561097e578160200160208202803683370190505b50905060005b6000848152602081905260409020600201548110156109e857600084815260036020908152604080832084845290915290205482518390839081106109cb576109cb611607565b6020908102919091010152806109e0816113e8565b915050610984565b5092915050565b600060208190529081526040902080548190610a0a90611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3690611431565b8015610a835780601f10610a5857610100808354040283529160200191610a83565b820191906000526020600020905b815481529060010190602001808311610a6657829003601f168201915b505050505090806001018054610a9890611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac490611431565b8015610b115780601f10610ae657610100808354040283529160200191610b11565b820191906000526020600020905b815481529060010190602001808311610af457829003601f168201915b5050505060038301546004840154600590940154929390926001600160a01b038083169350600160a01b90920460ff16911686565b610b9a6040518060e001604052806060815260200160608152602001606081526020016000815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b031681525090565b600082815260208190526040902060040154600160a01b900460ff16610bd25760405162461bcd60e51b815260040161022b906115c1565b60008281526020819052604090819020815160e08101909252805482908290610bfa90611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2690611431565b8015610c735780601f10610c4857610100808354040283529160200191610c73565b820191906000526020600020905b815481529060010190602001808311610c5657829003601f168201915b50505050508152602001600182018054610c8c90611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb890611431565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ddf578382906000526020600020018054610d5290611431565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7e90611431565b8015610dcb5780601f10610da057610100808354040283529160200191610dcb565b820191906000526020600020905b815481529060010190602001808311610dae57829003601f168201915b505050505081526020019060010190610d33565b505050908252506003820154602082015260048201546001600160a01b038082166040840152600160a01b90910460ff161515606083015260059092015490911660809091015292915050565b6001600160a01b038116600090815260016020908152604091829020805483518184028101840190945280845260609392830182828015610e8c57602002820191906000526020600020905b815481526020019060010190808311610e78575b50505050509050919050565b828054828255906000526020600020908101928215610ede579160200282015b82811115610ede5782518290610ece90826114ba565b5091602001919060010190610eb8565b50610eea929150610eee565b5090565b80821115610eea576000610f028282610f0b565b50600101610eee565b508054610f1790611431565b6000825580601f10610f27575050565b601f016020900490600052602060002090810190610f459190610f48565b50565b5b80821115610eea5760008155600101610f49565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f9c57610f9c610f5d565b604052919050565b600082601f830112610fb557600080fd5b813567ffffffffffffffff811115610fcf57610fcf610f5d565b610fe2601f8201601f1916602001610f73565b818152846020838601011115610ff757600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461102b57600080fd5b919050565b600080600080600060a0868803121561104857600080fd5b853567ffffffffffffffff8082111561106057600080fd5b61106c89838a01610fa4565b965060209150818801358181111561108357600080fd5b61108f8a828b01610fa4565b9650506040880135818111156110a457600080fd5b8801601f81018a136110b557600080fd5b8035828111156110c7576110c7610f5d565b8060051b6110d6858201610f73565b918252828101850191858101908d8411156110f057600080fd5b86850192505b8383101561112c5782358681111561110e5760008081fd5b61111c8f8983890101610fa4565b83525091860191908601906110f6565b809950505050505050506060860135915061114960808701611014565b90509295509295909350565b6000806040838503121561116857600080fd5b50508035926020909101359150565b6000806040838503121561118a57600080fd5b8235915061119a60208401611014565b90509250929050565b600080604083850312156111b657600080fd5b6111bf83611014565b946020939093013593505050565b6000602082840312156111df57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561121e57835183529284019291840191600101611202565b50909695505050505050565b6000815180845260005b8181101561125057602081850181015186830182015201611234565b506000602082860101526020601f19601f83011685010191505092915050565b60c08152600061128360c083018961122a565b8281036020840152611295818961122a565b604084019790975250506001600160a01b039384166060820152911515608083015290911660a09091015292915050565b60006020808352835160e0828501526112e361010085018261122a565b905081850151601f1980868403016040870152611300838361122a565b60408801518782038301606089015280518083529194508501925084840190600581901b8501860160005b82811015611357578487830301845261134582875161122a565b9588019593880193915060010161132b565b5060608a015160808a015260808a0151965061137e60a08a01886001600160a01b03169052565b60a08a015180151560c08b0152965060c08a01516001600160a01b03811660e08b015296509998505050505050505050565b6000602082840312156113c257600080fd5b6113cb82611014565b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016113fa576113fa6113d2565b5060010190565b8082028115828204841417611418576114186113d2565b92915050565b80820180821115611418576114186113d2565b600181811c9082168061144557607f821691505b60208210810361146557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156114b557600081815260208120601f850160051c810160208610156114925750805b601f850160051c820191505b818110156114b15782815560010161149e565b5050505b505050565b815167ffffffffffffffff8111156114d4576114d4610f5d565b6114e8816114e28454611431565b8461146b565b602080601f83116001811461151d57600084156115055750858301515b600019600386901b1c1916600185901b1785556114b1565b600085815260208120601f198616915b8281101561154c5788860151825594840194600190910190840161152d565b508582101561156a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60808152600061158d608083018761122a565b828103602084015261159f818761122a565b604084019590955250506001600160a01b039190911660609091015292915050565b602080825260139082015272141bdb1b08191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60006020828403121561160057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212202fe499f0ab2e10bc8c422d704f5ddd0ae71ebbf443ebd3e3a7607c0bd4723e2064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/Voting.sol:Voting",
        "label": "polls",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Poll)147_storage)"
      },
      {
        "astId": 157,
        "contract": "contracts/Voting.sol:Voting",
        "label": "pollsByCreator",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 163,
        "contract": "contracts/Voting.sol:Voting",
        "label": "hasVoted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 169,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voteCounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 171,
        "contract": "contracts/Voting.sol:Voting",
        "label": "pollCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Poll)147_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Poll)",
        "numberOfBytes": "32",
        "value": "t_struct(Poll)147_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Poll)147_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Poll",
        "members": [
          {
            "astId": 133,
            "contract": "contracts/Voting.sol:Voting",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 135,
            "contract": "contracts/Voting.sol:Voting",
            "label": "prompt",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 138,
            "contract": "contracts/Voting.sol:Voting",
            "label": "options",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 140,
            "contract": "contracts/Voting.sol:Voting",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 142,
            "contract": "contracts/Voting.sol:Voting",
            "label": "nftAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/Voting.sol:Voting",
            "label": "exists",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/Voting.sol:Voting",
            "label": "creator",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}